前言：对于分布式使用Nginx+Tomcat实现负载均衡，最常用的均衡算法有IP_Hash、轮训、根据权重、随机等。
	不管对于哪一种负载均衡算法，由于Nginx对不同的请求分发到某一个Tomcat，Tomcat在运行的时候分别是不同的容器里，
	因此会出现session不同步或者丢失的问题。
	实际上实现Session共享的方案很多，其中一种常用的就是使用Tomcat、Jetty等服务器提供的Session共享功能，
	将Session的内容统一存储在一个数据库（如MySQL）或缓存（如Redis）中
	
在分布式多台服务器的环境下，在一台服务器中用户的session如何处理
	1.session同步（缺点：性能问题）
	2.采用分布式的session（cookie+redis）登录成功之后给用户生成一个token标识，
	写到cookie中传递给客户端（同时也会保存在服务端redis），
	客户端在随后的访问中都会带着这个cookie上传到服务端（去访问redis），服务端根据这个cookie取到对应的用户信息
	原理和容器实现原生的session类似
	
	如果浏览器禁用了cookie，则使用URL重写
	或者将Session持久化到Memcache或者Redis中，省去了cookie
		（两种方式：1修改tomcat（修改Web服务器的配置文件）（麻烦，耦合度高）
		2使用spring session（https://www.cnblogs.com/zrlbiog/p/8023332.html））
		http://www.primeton.com/read.php?id=2244&his=1
		Spring Session是Spring提供的一套Session管理方案，通过一个SessionFilter将所有请求进行拦截，然后使用Request包装类来接管Session管理。
		Spring Session不与Web服务器耦合，能够适用于常规的服务器。同时还提供了统一浏览器多Session等功能。